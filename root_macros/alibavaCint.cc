//
// File generated by /home/rdm/HSG7Root/root_v5-34-19/src/bin/rootcint at Tue Apr 28 16:31:13 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME alibavaCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "alibavaCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::EventBlock EventBlock;
      #else
      class EventBlock  {
         public:
         //friend XX;
         unsigned int clock; //
         unsigned int time; //
         unsigned short temp; //
         unsigned short data[256]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::EventData EventData;
      #else
      class EventData  :  public ::EventBlock {
         public:
         //friend XX;
         double value; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::EventDataBlock EventDataBlock;
      #else
      class EventDataBlock  :  public ::EventData {
         public:
         //friend XX;
         unsigned short header[32]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Hit Hit;
      #else
      class Hit  {
         public:
         //friend XX;
         int _center; //
         int _left; //
         int _right; //
         double _sig; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ChanList ChanList;
      #else
      class ChanList  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ChanList() throw() {};
         int nch; //number of channels in the list
         vector< int > ch; //list of channels
         ::HitList hits; //
         double cm; //Common mode
         double noise; //noise
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DataFileRoot DataFileRoot;
      #else
      class DataFileRoot  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::DataFileRoot::ScanType ScanType;
         #else
         enum ScanType  {
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::DataFileRoot::RunType RunType;
         #else
         enum RunType  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~DataFileRoot() throw() {};
         RunType _type; //
         time_t _t0; //
         int _nchips; //
         int _chip_mask; //
         int _firmware; //
         ScanType _scantype; //
         int _npoints; //
         int _from; //
         int _to; //
         int _step; //
         int _nevts; //
         int _nchan; //current number of channels
         double _seedcut; //
         double _neighcut; //
         unsigned short _header[2][16]; //
         double _ped[256]; //
         double _noise[256]; //
         double _signal[256]; //
         double _sn[256]; //
         double _cmmd[2]; //
         double _cnoise[2]; //
         double _gain[256]; //
         double _average_gain; //
         bool _mask[256]; //
         int _version; //
         int _polarity; //
         double _t1; //
         double _t2; //
         ::HitList _hits; //
         vector< ::ChanList > chan_list; //
         ::EventDataBlock _data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AsciiRoot AsciiRoot;
      #else
      class AsciiRoot  :  public ::DataFileRoot {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::AsciiRoot::BlockType BlockType;
         #else
         enum BlockType  {
         };
         #endif

         typedef ::std::vector< ::string, ::allocator< ::string> > XtraValues;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AsciiRoot() throw() {};
         ::AsciiRootPriv* priv; //
         unsigned long data_start; //
         unsigned long saved_state; //
         XtraValues _xtra; //extra values from header
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HDFRoot HDFRoot;
      #else
      class HDFRoot  :  public ::DataFileRoot {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HDFRoot() throw() {};
         ::HDFRootPrivate* priv; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Tracer Tracer;
      #else
      class Tracer  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Tracer() throw() {};
         unsigned int size; //
         int average; //
         double cntr; //
         double val; //
         deque< double > queue; //
         ::TH1* hst; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void EventBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EventBlock_Dictionary();
   static void *new_EventBlock(void *p = 0);
   static void *newArray_EventBlock(Long_t size, void *p);
   static void delete_EventBlock(void *p);
   static void deleteArray_EventBlock(void *p);
   static void destruct_EventBlock(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventBlock*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::EventBlock) == sizeof(::ROOT::Shadow::EventBlock));
      ::EventBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EventBlock),0);
      static ::ROOT::TGenericClassInfo 
         instance("EventBlock", "./Data.h", 9,
                  typeid(::EventBlock), DefineBehavior(ptr, ptr),
                  &EventBlock_ShowMembers, &EventBlock_Dictionary, isa_proxy, 4,
                  sizeof(::EventBlock) );
      instance.SetNew(&new_EventBlock);
      instance.SetNewArray(&newArray_EventBlock);
      instance.SetDelete(&delete_EventBlock);
      instance.SetDeleteArray(&deleteArray_EventBlock);
      instance.SetDestructor(&destruct_EventBlock);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventBlock*)
   {
      return GenerateInitInstanceLocal((::EventBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EventBlock_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EventBlock*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EventData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EventData_Dictionary();
   static void *new_EventData(void *p = 0);
   static void *newArray_EventData(Long_t size, void *p);
   static void delete_EventData(void *p);
   static void deleteArray_EventData(void *p);
   static void destruct_EventData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::EventData) == sizeof(::ROOT::Shadow::EventData));
      ::EventData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EventData),0);
      static ::ROOT::TGenericClassInfo 
         instance("EventData", "./Data.h", 24,
                  typeid(::EventData), DefineBehavior(ptr, ptr),
                  &EventData_ShowMembers, &EventData_Dictionary, isa_proxy, 4,
                  sizeof(::EventData) );
      instance.SetNew(&new_EventData);
      instance.SetNewArray(&newArray_EventData);
      instance.SetDelete(&delete_EventData);
      instance.SetDeleteArray(&deleteArray_EventData);
      instance.SetDestructor(&destruct_EventData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventData*)
   {
      return GenerateInitInstanceLocal((::EventData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EventData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EventData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EventDataBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EventDataBlock_Dictionary();
   static void *new_EventDataBlock(void *p = 0);
   static void *newArray_EventDataBlock(Long_t size, void *p);
   static void delete_EventDataBlock(void *p);
   static void deleteArray_EventDataBlock(void *p);
   static void destruct_EventDataBlock(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventDataBlock*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::EventDataBlock) == sizeof(::ROOT::Shadow::EventDataBlock));
      ::EventDataBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EventDataBlock),0);
      static ::ROOT::TGenericClassInfo 
         instance("EventDataBlock", "./Data.h", 29,
                  typeid(::EventDataBlock), DefineBehavior(ptr, ptr),
                  &EventDataBlock_ShowMembers, &EventDataBlock_Dictionary, isa_proxy, 4,
                  sizeof(::EventDataBlock) );
      instance.SetNew(&new_EventDataBlock);
      instance.SetNewArray(&newArray_EventDataBlock);
      instance.SetDelete(&delete_EventDataBlock);
      instance.SetDeleteArray(&deleteArray_EventDataBlock);
      instance.SetDestructor(&destruct_EventDataBlock);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventDataBlock*)
   {
      return GenerateInitInstanceLocal((::EventDataBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventDataBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EventDataBlock_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EventDataBlock*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Hit_Dictionary();
   static void *new_Hit(void *p = 0);
   static void *newArray_Hit(Long_t size, void *p);
   static void delete_Hit(void *p);
   static void deleteArray_Hit(void *p);
   static void destruct_Hit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Hit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Hit) == sizeof(::ROOT::Shadow::Hit));
      ::Hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Hit),0);
      static ::ROOT::TGenericClassInfo 
         instance("Hit", "./Hit.h", 11,
                  typeid(::Hit), DefineBehavior(ptr, ptr),
                  &Hit_ShowMembers, &Hit_Dictionary, isa_proxy, 4,
                  sizeof(::Hit) );
      instance.SetNew(&new_Hit);
      instance.SetNewArray(&newArray_Hit);
      instance.SetDelete(&delete_Hit);
      instance.SetDeleteArray(&deleteArray_Hit);
      instance.SetDestructor(&destruct_Hit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Hit*)
   {
      return GenerateInitInstanceLocal((::Hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Hit_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ChanList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ChanList_Dictionary();
   static void *new_ChanList(void *p = 0);
   static void *newArray_ChanList(Long_t size, void *p);
   static void delete_ChanList(void *p);
   static void deleteArray_ChanList(void *p);
   static void destruct_ChanList(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ChanList*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ChanList) == sizeof(::ROOT::Shadow::ChanList));
      ::ChanList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ChanList),0);
      static ::ROOT::TGenericClassInfo 
         instance("ChanList", "./ChanList.h", 16,
                  typeid(::ChanList), DefineBehavior(ptr, ptr),
                  &ChanList_ShowMembers, &ChanList_Dictionary, isa_proxy, 4,
                  sizeof(::ChanList) );
      instance.SetNew(&new_ChanList);
      instance.SetNewArray(&newArray_ChanList);
      instance.SetDelete(&delete_ChanList);
      instance.SetDeleteArray(&deleteArray_ChanList);
      instance.SetDestructor(&destruct_ChanList);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ChanList*)
   {
      return GenerateInitInstanceLocal((::ChanList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ChanList*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ChanList_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ChanList*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void DataFileRoot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DataFileRoot_Dictionary();
   static void delete_DataFileRoot(void *p);
   static void deleteArray_DataFileRoot(void *p);
   static void destruct_DataFileRoot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DataFileRoot*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DataFileRoot) == sizeof(::ROOT::Shadow::DataFileRoot));
      ::DataFileRoot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DataFileRoot),0);
      static ::ROOT::TGenericClassInfo 
         instance("DataFileRoot", "./DataFileRoot.h", 26,
                  typeid(::DataFileRoot), DefineBehavior(ptr, ptr),
                  &DataFileRoot_ShowMembers, &DataFileRoot_Dictionary, isa_proxy, 4,
                  sizeof(::DataFileRoot) );
      instance.SetDelete(&delete_DataFileRoot);
      instance.SetDeleteArray(&deleteArray_DataFileRoot);
      instance.SetDestructor(&destruct_DataFileRoot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DataFileRoot*)
   {
      return GenerateInitInstanceLocal((::DataFileRoot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DataFileRoot*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DataFileRoot_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::DataFileRoot*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void AsciiRoot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AsciiRoot_Dictionary();
   static void *new_AsciiRoot(void *p = 0);
   static void *newArray_AsciiRoot(Long_t size, void *p);
   static void delete_AsciiRoot(void *p);
   static void deleteArray_AsciiRoot(void *p);
   static void destruct_AsciiRoot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::AsciiRoot*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AsciiRoot) == sizeof(::ROOT::Shadow::AsciiRoot));
      ::AsciiRoot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AsciiRoot),0);
      static ::ROOT::TGenericClassInfo 
         instance("AsciiRoot", "./AsciiRoot.h", 13,
                  typeid(::AsciiRoot), DefineBehavior(ptr, ptr),
                  &AsciiRoot_ShowMembers, &AsciiRoot_Dictionary, isa_proxy, 4,
                  sizeof(::AsciiRoot) );
      instance.SetNew(&new_AsciiRoot);
      instance.SetNewArray(&newArray_AsciiRoot);
      instance.SetDelete(&delete_AsciiRoot);
      instance.SetDeleteArray(&deleteArray_AsciiRoot);
      instance.SetDestructor(&destruct_AsciiRoot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::AsciiRoot*)
   {
      return GenerateInitInstanceLocal((::AsciiRoot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AsciiRoot*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AsciiRoot_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::AsciiRoot*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HDFRoot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HDFRoot_Dictionary();
   static void *new_HDFRoot(void *p = 0);
   static void *newArray_HDFRoot(Long_t size, void *p);
   static void delete_HDFRoot(void *p);
   static void deleteArray_HDFRoot(void *p);
   static void destruct_HDFRoot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HDFRoot*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HDFRoot) == sizeof(::ROOT::Shadow::HDFRoot));
      ::HDFRoot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HDFRoot),0);
      static ::ROOT::TGenericClassInfo 
         instance("HDFRoot", "./HDFRoot.h", 16,
                  typeid(::HDFRoot), DefineBehavior(ptr, ptr),
                  &HDFRoot_ShowMembers, &HDFRoot_Dictionary, isa_proxy, 4,
                  sizeof(::HDFRoot) );
      instance.SetNew(&new_HDFRoot);
      instance.SetNewArray(&newArray_HDFRoot);
      instance.SetDelete(&delete_HDFRoot);
      instance.SetDeleteArray(&deleteArray_HDFRoot);
      instance.SetDestructor(&destruct_HDFRoot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HDFRoot*)
   {
      return GenerateInitInstanceLocal((::HDFRoot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDFRoot*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HDFRoot_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HDFRoot*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Tracer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Tracer_Dictionary();
   static void delete_Tracer(void *p);
   static void deleteArray_Tracer(void *p);
   static void destruct_Tracer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Tracer*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Tracer) == sizeof(::ROOT::Shadow::Tracer));
      ::Tracer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Tracer),0);
      static ::ROOT::TGenericClassInfo 
         instance("Tracer", "./Tracer.h", 8,
                  typeid(::Tracer), DefineBehavior(ptr, ptr),
                  &Tracer_ShowMembers, &Tracer_Dictionary, isa_proxy, 4,
                  sizeof(::Tracer) );
      instance.SetDelete(&delete_Tracer);
      instance.SetDeleteArray(&deleteArray_Tracer);
      instance.SetDestructor(&destruct_Tracer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Tracer*)
   {
      return GenerateInitInstanceLocal((::Tracer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Tracer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Tracer_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Tracer*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void EventBlock_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class EventBlock.
      typedef ::ROOT::Shadow::EventBlock ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::EventBlock*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clock", &sobj->clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temp", &sobj->temp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[256]", sobj->data);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventBlock(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventBlock : new ::EventBlock;
   }
   static void *newArray_EventBlock(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventBlock[nElements] : new ::EventBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventBlock(void *p) {
      delete ((::EventBlock*)p);
   }
   static void deleteArray_EventBlock(void *p) {
      delete [] ((::EventBlock*)p);
   }
   static void destruct_EventBlock(void *p) {
      typedef ::EventBlock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventBlock

//______________________________________________________________________________
namespace ROOT {
   void EventData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class EventData.
      typedef ::ROOT::Shadow::EventData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::EventData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value", &sobj->value);
      R__insp.GenericShowMembers("EventBlock", ( ::EventBlock * )( (::EventData*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventData : new ::EventData;
   }
   static void *newArray_EventData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventData[nElements] : new ::EventData[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventData(void *p) {
      delete ((::EventData*)p);
   }
   static void deleteArray_EventData(void *p) {
      delete [] ((::EventData*)p);
   }
   static void destruct_EventData(void *p) {
      typedef ::EventData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventData

//______________________________________________________________________________
namespace ROOT {
   void EventDataBlock_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class EventDataBlock.
      typedef ::ROOT::Shadow::EventDataBlock ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::EventDataBlock*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header[32]", sobj->header);
      R__insp.GenericShowMembers("EventData", ( ::EventData * )( (::EventDataBlock*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventDataBlock(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventDataBlock : new ::EventDataBlock;
   }
   static void *newArray_EventDataBlock(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventDataBlock[nElements] : new ::EventDataBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventDataBlock(void *p) {
      delete ((::EventDataBlock*)p);
   }
   static void deleteArray_EventDataBlock(void *p) {
      delete [] ((::EventDataBlock*)p);
   }
   static void destruct_EventDataBlock(void *p) {
      typedef ::EventDataBlock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventDataBlock

//______________________________________________________________________________
namespace ROOT {
   void Hit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Hit.
      typedef ::ROOT::Shadow::Hit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_center", &sobj->_center);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_left", &sobj->_left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_right", &sobj->_right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sig", &sobj->_sig);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Hit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Hit : new ::Hit;
   }
   static void *newArray_Hit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Hit[nElements] : new ::Hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_Hit(void *p) {
      delete ((::Hit*)p);
   }
   static void deleteArray_Hit(void *p) {
      delete [] ((::Hit*)p);
   }
   static void destruct_Hit(void *p) {
      typedef ::Hit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Hit

//______________________________________________________________________________
namespace ROOT {
   void ChanList_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ChanList.
      typedef ::ROOT::Shadow::ChanList ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ChanList*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nch", &sobj->nch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch", (void*)&sobj->ch);
      R__insp.InspectMember("vector<int>", (void*)&sobj->ch, "ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hits", (void*)&sobj->hits);
      R__insp.InspectMember("HitList", (void*)&sobj->hits, "hits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cm", &sobj->cm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noise", &sobj->noise);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ChanList(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChanList : new ::ChanList;
   }
   static void *newArray_ChanList(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChanList[nElements] : new ::ChanList[nElements];
   }
   // Wrapper around operator delete
   static void delete_ChanList(void *p) {
      delete ((::ChanList*)p);
   }
   static void deleteArray_ChanList(void *p) {
      delete [] ((::ChanList*)p);
   }
   static void destruct_ChanList(void *p) {
      typedef ::ChanList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ChanList

//______________________________________________________________________________
namespace ROOT {
   void DataFileRoot_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DataFileRoot.
      typedef ::ROOT::Shadow::DataFileRoot ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::DataFileRoot*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", &sobj->_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_t0", &sobj->_t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nchips", &sobj->_nchips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chip_mask", &sobj->_chip_mask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_firmware", &sobj->_firmware);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scantype", &sobj->_scantype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npoints", &sobj->_npoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_from", &sobj->_from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_to", &sobj->_to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_step", &sobj->_step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevts", &sobj->_nevts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nchan", &sobj->_nchan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_seedcut", &sobj->_seedcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_neighcut", &sobj->_neighcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_header[2][16]", sobj->_header);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped[256]", sobj->_ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_noise[256]", sobj->_noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_signal[256]", sobj->_signal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sn[256]", sobj->_sn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cmmd[2]", sobj->_cmmd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cnoise[2]", sobj->_cnoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_gain[256]", sobj->_gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_average_gain", &sobj->_average_gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mask[256]", sobj->_mask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_version", &sobj->_version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_polarity", &sobj->_polarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_t1", &sobj->_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_t2", &sobj->_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hits", (void*)&sobj->_hits);
      R__insp.InspectMember("HitList", (void*)&sobj->_hits, "_hits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chan_list", (void*)&sobj->chan_list);
      R__insp.InspectMember("vector<ChanList>", (void*)&sobj->chan_list, "chan_list.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_data", (void*)&sobj->_data);
      R__insp.InspectMember("EventDataBlock", (void*)&sobj->_data, "_data.", false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_DataFileRoot(void *p) {
      delete ((::DataFileRoot*)p);
   }
   static void deleteArray_DataFileRoot(void *p) {
      delete [] ((::DataFileRoot*)p);
   }
   static void destruct_DataFileRoot(void *p) {
      typedef ::DataFileRoot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DataFileRoot

//______________________________________________________________________________
namespace ROOT {
   void AsciiRoot_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AsciiRoot.
      typedef ::ROOT::Shadow::AsciiRoot ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::AsciiRoot*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*priv", &sobj->priv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data_start", &sobj->data_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saved_state", &sobj->saved_state);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xtra", (void*)&sobj->_xtra);
      R__insp.InspectMember("AsciiRoot::XtraValues", (void*)&sobj->_xtra, "_xtra.", false);
      R__insp.GenericShowMembers("DataFileRoot", ( ::DataFileRoot * )( (::AsciiRoot*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_AsciiRoot(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AsciiRoot : new ::AsciiRoot;
   }
   static void *newArray_AsciiRoot(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AsciiRoot[nElements] : new ::AsciiRoot[nElements];
   }
   // Wrapper around operator delete
   static void delete_AsciiRoot(void *p) {
      delete ((::AsciiRoot*)p);
   }
   static void deleteArray_AsciiRoot(void *p) {
      delete [] ((::AsciiRoot*)p);
   }
   static void destruct_AsciiRoot(void *p) {
      typedef ::AsciiRoot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::AsciiRoot

//______________________________________________________________________________
namespace ROOT {
   void HDFRoot_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HDFRoot.
      typedef ::ROOT::Shadow::HDFRoot ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HDFRoot*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*priv", &sobj->priv);
      R__insp.GenericShowMembers("DataFileRoot", ( ::DataFileRoot * )( (::HDFRoot*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HDFRoot(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HDFRoot : new ::HDFRoot;
   }
   static void *newArray_HDFRoot(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HDFRoot[nElements] : new ::HDFRoot[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDFRoot(void *p) {
      delete ((::HDFRoot*)p);
   }
   static void deleteArray_HDFRoot(void *p) {
      delete [] ((::HDFRoot*)p);
   }
   static void destruct_HDFRoot(void *p) {
      typedef ::HDFRoot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HDFRoot

//______________________________________________________________________________
namespace ROOT {
   void Tracer_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Tracer.
      typedef ::ROOT::Shadow::Tracer ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Tracer*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &sobj->size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "average", &sobj->average);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntr", &sobj->cntr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "val", &sobj->val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "queue", (void*)&sobj->queue);
      R__insp.InspectMember("deque<double>", (void*)&sobj->queue, "queue.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hst", &sobj->hst);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Tracer(void *p) {
      delete ((::Tracer*)p);
   }
   static void deleteArray_Tracer(void *p) {
      delete [] ((::Tracer*)p);
   }
   static void destruct_Tracer(void *p) {
      typedef ::Tracer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Tracer

namespace ROOT {
   void dequelEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dequelEdoublegR_Dictionary();
   static void *new_dequelEdoublegR(void *p = 0);
   static void *newArray_dequelEdoublegR(Long_t size, void *p);
   static void delete_dequelEdoublegR(void *p);
   static void deleteArray_dequelEdoublegR(void *p);
   static void destruct_dequelEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const deque<double>*)
   {
      deque<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(deque<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("deque<double>", -2, "/disk/homedisk/home/rdm/HSG7Root/root_v5-34-19/src/cint/cint/lib/prec_stl/deque", 42,
                  typeid(deque<double>), DefineBehavior(ptr, ptr),
                  0, &dequelEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(deque<double>) );
      instance.SetNew(&new_dequelEdoublegR);
      instance.SetNewArray(&newArray_dequelEdoublegR);
      instance.SetDelete(&delete_dequelEdoublegR);
      instance.SetDeleteArray(&deleteArray_dequelEdoublegR);
      instance.SetDestructor(&destruct_dequelEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< deque<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const deque<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dequelEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const deque<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_dequelEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double> : new deque<double>;
   }
   static void *newArray_dequelEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double>[nElements] : new deque<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_dequelEdoublegR(void *p) {
      delete ((deque<double>*)p);
   }
   static void deleteArray_dequelEdoublegR(void *p) {
      delete [] ((deque<double>*)p);
   }
   static void destruct_dequelEdoublegR(void *p) {
      typedef deque<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class deque<double>

namespace ROOT {
   void vectorlEChanListgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEChanListgR_Dictionary();
   static void *new_vectorlEChanListgR(void *p = 0);
   static void *newArray_vectorlEChanListgR(Long_t size, void *p);
   static void delete_vectorlEChanListgR(void *p);
   static void deleteArray_vectorlEChanListgR(void *p);
   static void destruct_vectorlEChanListgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ChanList>*)
   {
      vector<ChanList> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ChanList>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ChanList>", -2, "/disk/homedisk/home/rdm/HSG7Root/root_v5-34-19/src/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<ChanList>), DefineBehavior(ptr, ptr),
                  0, &vectorlEChanListgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ChanList>) );
      instance.SetNew(&new_vectorlEChanListgR);
      instance.SetNewArray(&newArray_vectorlEChanListgR);
      instance.SetDelete(&delete_vectorlEChanListgR);
      instance.SetDeleteArray(&deleteArray_vectorlEChanListgR);
      instance.SetDestructor(&destruct_vectorlEChanListgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ChanList> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ChanList>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEChanListgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ChanList>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEChanListgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ChanList> : new vector<ChanList>;
   }
   static void *newArray_vectorlEChanListgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ChanList>[nElements] : new vector<ChanList>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEChanListgR(void *p) {
      delete ((vector<ChanList>*)p);
   }
   static void deleteArray_vectorlEChanListgR(void *p) {
      delete [] ((vector<ChanList>*)p);
   }
   static void destruct_vectorlEChanListgR(void *p) {
      typedef vector<ChanList> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ChanList>

namespace ROOT {
   void vectorlEHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHitgR_Dictionary();
   static void *new_vectorlEHitgR(void *p = 0);
   static void *newArray_vectorlEHitgR(Long_t size, void *p);
   static void delete_vectorlEHitgR(void *p);
   static void deleteArray_vectorlEHitgR(void *p);
   static void destruct_vectorlEHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Hit>*)
   {
      vector<Hit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Hit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Hit>", -2, "/disk/homedisk/home/rdm/HSG7Root/root_v5-34-19/src/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Hit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Hit>) );
      instance.SetNew(&new_vectorlEHitgR);
      instance.SetNewArray(&newArray_vectorlEHitgR);
      instance.SetDelete(&delete_vectorlEHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEHitgR);
      instance.SetDestructor(&destruct_vectorlEHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Hit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Hit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Hit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Hit> : new vector<Hit>;
   }
   static void *newArray_vectorlEHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Hit>[nElements] : new vector<Hit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHitgR(void *p) {
      delete ((vector<Hit>*)p);
   }
   static void deleteArray_vectorlEHitgR(void *p) {
      delete [] ((vector<Hit>*)p);
   }
   static void destruct_vectorlEHitgR(void *p) {
      typedef vector<Hit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Hit>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/disk/homedisk/home/rdm/HSG7Root/root_v5-34-19/src/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/disk/homedisk/home/rdm/HSG7Root/root_v5-34-19/src/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* alibavaCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablealibavaCint();

extern "C" void G__set_cpp_environmentalibavaCint() {
  G__cpp_reset_tagtablealibavaCint();
}
#include <new>
extern "C" int G__cpp_dllrevalibavaCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EventBlock */
// automatic default constructor
static int G__alibavaCint_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventBlock *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventBlock[n];
     } else {
       p = new((void*) gvp) EventBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventBlock;
     } else {
       p = new((void*) gvp) EventBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventBlock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventBlock(*(EventBlock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventBlock G__TEventBlock;
static int G__alibavaCint_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventBlock*) (soff+(sizeof(EventBlock)*i)))->~G__TEventBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventBlock*) (soff))->~G__TEventBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventBlock* dest = (EventBlock*) G__getstructoffset();
   *dest = *(EventBlock*) libp->para[0].ref;
   const EventBlock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventData */
// automatic default constructor
static int G__alibavaCint_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventData[n];
     } else {
       p = new((void*) gvp) EventData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventData;
     } else {
       p = new((void*) gvp) EventData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventData(*(EventData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventData G__TEventData;
static int G__alibavaCint_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventData*) (soff+(sizeof(EventData)*i)))->~G__TEventData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventData*) (soff))->~G__TEventData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventData* dest = (EventData*) G__getstructoffset();
   *dest = *(EventData*) libp->para[0].ref;
   const EventData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventDataBlock */
// automatic default constructor
static int G__alibavaCint_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventDataBlock *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventDataBlock[n];
     } else {
       p = new((void*) gvp) EventDataBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventDataBlock;
     } else {
       p = new((void*) gvp) EventDataBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventDataBlock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventDataBlock(*(EventDataBlock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventDataBlock G__TEventDataBlock;
static int G__alibavaCint_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventDataBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventDataBlock*) (soff+(sizeof(EventDataBlock)*i)))->~G__TEventDataBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventDataBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventDataBlock*) (soff))->~G__TEventDataBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventDataBlock* dest = (EventDataBlock*) G__getstructoffset();
   *dest = *(EventDataBlock*) libp->para[0].ref;
   const EventDataBlock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Hit */
static int G__alibavaCint_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) Hit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Hit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Hit((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Hit((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Hit[n];
       } else {
         p = new((void*) gvp) Hit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Hit;
       } else {
         p = new((void*) gvp) Hit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Hit(*(Hit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Hit(*(Hit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Hit& obj = ((Hit*) G__getstructoffset())->operator=(*(Hit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->center());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->left());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->right());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Hit*) G__getstructoffset())->signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->width());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Hit G__THit;
static int G__alibavaCint_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Hit*) (soff+(sizeof(Hit)*i)))->~G__THit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Hit*) (soff))->~G__THit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ChanList */
static int G__alibavaCint_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChanList* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ChanList((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ChanList((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ChanList[n];
       } else {
         p = new((void*) gvp) ChanList[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ChanList;
       } else {
         p = new((void*) gvp) ChanList;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_ChanList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChanList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ChanList((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ChanList((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_ChanList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChanList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ChanList(*(ChanList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ChanList(*(ChanList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_ChanList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ChanList& obj = ((ChanList*) G__getstructoffset())->operator=(*(ChanList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ChanList*) G__getstructoffset())->Set((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ChanList*) G__getstructoffset())->Nch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ChanList*) G__getstructoffset())->Chan((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ChanList*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ChanList*) G__getstructoffset())->add_hit(*(Hit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ChanList*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ChanList*) G__getstructoffset())->nhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ChanList*) G__getstructoffset())->clear_hits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Hit& obj = ((const ChanList*) G__getstructoffset())->get_hit((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HitList* pobj;
         const HitList xobj = ((const ChanList*) G__getstructoffset())->hit_list();
         pobj = new HitList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ChanList*) G__getstructoffset())->CommonMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ChanList*) G__getstructoffset())->Noise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ChanList*) G__getstructoffset())->CommonMode((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ChanList*) G__getstructoffset())->Noise((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ChanList::ParseChanList((const char*) G__int(libp->para[0]), (ChanList**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ChanList G__TChanList;
static int G__alibavaCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ChanList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ChanList*) (soff+(sizeof(ChanList)*i)))->~G__TChanList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ChanList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ChanList*) (soff))->~G__TChanList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DataFileRoot */
static int G__alibavaCint_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->set_data((int) G__int(libp->para[0]), (unsigned short) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) DataFileRoot::OpenFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) DataFileRoot::OpenFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) DataFileRoot::OpenFile((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) DataFileRoot::OpenFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataFileRoot*) G__getstructoffset())->valid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->open((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->rewind();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->save();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->restore();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DataFileRoot*) G__getstructoffset())->read_event());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DataFileRoot*) G__getstructoffset())->read_data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->check_point((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->new_file((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->start_of_run((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->end_of_run((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->new_data_block((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->polarity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->polarity((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((DataFileRoot*) G__getstructoffset())->set_data((int) G__int(libp->para[0]), (const unsigned short*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((DataFileRoot*) G__getstructoffset())->set_data((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->nchan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->type());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const DataFileRoot*) G__getstructoffset())->date());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->ped((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->noise((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->signal((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->sn((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->get_cmmd((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->get_cnoise((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const DataFileRoot*) G__getstructoffset())->data((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->value());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const DataFileRoot*) G__getstructoffset())->clock_counter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->temp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->scan_type());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->npts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->from());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->to());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->step());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->nevts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->add_hit(*(Hit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Hit,allocator<Hit> >::iterator* pobj;
         vector<Hit,allocator<Hit> >::iterator xobj = ((DataFileRoot*) G__getstructoffset())->begin();
         pobj = new vector<Hit,allocator<Hit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Hit,allocator<Hit> >::iterator* pobj;
         vector<Hit,allocator<Hit> >::iterator xobj = ((DataFileRoot*) G__getstructoffset())->end();
         pobj = new vector<Hit,allocator<Hit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->nhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataFileRoot*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Hit& obj = ((const DataFileRoot*) G__getstructoffset())->hit((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->set_hit_list(*(HitList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->get_gain((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->gain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->seed_cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DataFileRoot*) G__getstructoffset())->neigh_cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->set_cuts((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->set_timecut((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataFileRoot*) G__getstructoffset())->valid_time((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((DataFileRoot*) G__getstructoffset())->get_header((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DataFileRoot*) G__getstructoffset())->show_pedestals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DataFileRoot*) G__getstructoffset())->show_noise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((DataFileRoot*) G__getstructoffset())->compute_pedestals((int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((DataFileRoot*) G__getstructoffset())->compute_pedestals((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((DataFileRoot*) G__getstructoffset())->compute_pedestals());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((DataFileRoot*) G__getstructoffset())->compute_pedestals_fast((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((DataFileRoot*) G__getstructoffset())->compute_pedestals_fast((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((DataFileRoot*) G__getstructoffset())->compute_pedestals_fast((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((DataFileRoot*) G__getstructoffset())->compute_pedestals_fast();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((DataFileRoot*) G__getstructoffset())->process_event((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((DataFileRoot*) G__getstructoffset())->process_event();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((DataFileRoot*) G__getstructoffset())->find_clusters((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((DataFileRoot*) G__getstructoffset())->find_clusters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->find_clusters(*(ChanList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->save_pedestals((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((DataFileRoot*) G__getstructoffset())->load_pedestals((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((DataFileRoot*) G__getstructoffset())->load_pedestals((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->load_gain((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->load_masking((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((DataFileRoot*) G__getstructoffset())->spy_data((bool) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((DataFileRoot*) G__getstructoffset())->spy_data((bool) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((DataFileRoot*) G__getstructoffset())->spy_data((bool) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((DataFileRoot*) G__getstructoffset())->spy_data((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((DataFileRoot*) G__getstructoffset())->spy_data();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->common_mode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((DataFileRoot*) G__getstructoffset())->common_mode(*(ChanList*) libp->para[0].ref, (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((DataFileRoot*) G__getstructoffset())->common_mode(*(ChanList*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->n_channel_list());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->add_channel_list(*(ChanList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataFileRoot*) G__getstructoffset())->clear_channel_lists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ChanList* pobj;
         const ChanList xobj = ((const DataFileRoot*) G__getstructoffset())->get_channel_list((int) G__int(libp->para[0]));
         pobj = new ChanList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->chip_mask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->firmware());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_206_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DataFileRoot*) G__getstructoffset())->nchips());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DataFileRoot G__TDataFileRoot;
static int G__alibavaCint_206_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DataFileRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DataFileRoot*) (soff+(sizeof(DataFileRoot)*i)))->~G__TDataFileRoot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DataFileRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DataFileRoot*) (soff))->~G__TDataFileRoot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_206_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DataFileRoot* dest = (DataFileRoot*) G__getstructoffset();
   *dest = *(DataFileRoot*) libp->para[0].ref;
   const DataFileRoot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AsciiRoot */
static int G__alibavaCint_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AsciiRoot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AsciiRoot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AsciiRoot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AsciiRoot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AsciiRoot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AsciiRoot((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AsciiRoot((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AsciiRoot[n];
       } else {
         p = new((void*) gvp) AsciiRoot[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AsciiRoot;
       } else {
         p = new((void*) gvp) AsciiRoot;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AsciiRoot*) G__getstructoffset())->nxtra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const AsciiRoot*) G__getstructoffset())->xtra((int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AsciiRoot*) G__getstructoffset())->add_xtra(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AsciiRoot*) G__getstructoffset())->add_xtra((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AsciiRoot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AsciiRoot(*(AsciiRoot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AsciiRoot G__TAsciiRoot;
static int G__alibavaCint_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AsciiRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AsciiRoot*) (soff+(sizeof(AsciiRoot)*i)))->~G__TAsciiRoot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AsciiRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AsciiRoot*) (soff))->~G__TAsciiRoot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_214_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AsciiRoot* dest = (AsciiRoot*) G__getstructoffset();
   *dest = *(AsciiRoot*) libp->para[0].ref;
   const AsciiRoot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDFRoot */
static int G__alibavaCint_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDFRoot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDFRoot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HDFRoot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDFRoot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HDFRoot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDFRoot((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HDFRoot((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDFRoot[n];
       } else {
         p = new((void*) gvp) HDFRoot[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDFRoot;
       } else {
         p = new((void*) gvp) HDFRoot;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDFRoot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDFRoot(*(HDFRoot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDFRoot G__THDFRoot;
static int G__alibavaCint_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDFRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDFRoot*) (soff+(sizeof(HDFRoot)*i)))->~G__THDFRoot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDFRoot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDFRoot*) (soff))->~G__THDFRoot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDFRoot* dest = (HDFRoot*) G__getstructoffset();
   *dest = *(HDFRoot*) libp->para[0].ref;
   const HDFRoot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Tracer */
static int G__alibavaCint_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Tracer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Tracer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Tracer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Tracer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Tracer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_Tracer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Tracer*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Tracer*) G__getstructoffset())->Draw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Tracer*) G__getstructoffset())->get_hst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tracer*) G__getstructoffset())->fill((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tracer*) G__getstructoffset())->add_point((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alibavaCint_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Tracer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Tracer(*(Tracer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alibavaCintLN_Tracer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Tracer G__TTracer;
static int G__alibavaCint_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Tracer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Tracer*) (soff+(sizeof(Tracer)*i)))->~G__TTracer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Tracer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Tracer*) (soff))->~G__TTracer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alibavaCint_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Tracer* dest = (Tracer*) G__getstructoffset();
   *dest = *(Tracer*) libp->para[0].ref;
   const Tracer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__alibavaCint__0_631(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) is_text((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_632(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      spy_file(*(DataFileRoot*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      spy_file(*(DataFileRoot*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_633(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) analyze(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) analyze(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) analyze(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) analyze(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) analyze(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_634(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) draw_scan(
*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) draw_scan(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) draw_scan(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) draw_scan(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) draw_scan(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) draw_scan(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_635(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) spectrum(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) spectrum(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) spectrum(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) spectrum(*(DataFileRoot*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_636(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      show_spectrum((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (DataFileRoot*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      show_spectrum((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (DataFileRoot*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_637(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) fit_landau((TH1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_638(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) funcScurve((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) funcScurve());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_639(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) funcScurveC((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) funcScurveC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_640(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pulse_shape((TH2*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_641(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      set_debug((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_642(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) get_debug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_643(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      init_landau();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_644(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      save_text_file((TH1*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_843(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) isws((char) G__int(libp->para[0]), (char *const) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) isws((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_844(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = trim_right(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_845(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = trim_left(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_846(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = trim_str(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_847(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) create_canvas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) create_canvas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) create_canvas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_848(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) create_h1((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_849(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) create_h2(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_850(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) create_profile(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_851(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) create_profile2d(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_852(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) get_volt((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_853(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) scan_laser((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_854(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      graph2csv((TGraphErrors*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      graph2csv((TGraphErrors*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_855(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) printCanvas((TCanvas*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) printCanvas((TCanvas*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_856(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      sin_preguntas(
(DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      sin_preguntas(
(DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      sin_preguntas((DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      sin_preguntas((DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      sin_preguntas((DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      sin_preguntas((DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      sin_preguntas((DataFileRoot*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_857(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      init_crrc();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_858(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SetN((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alibavaCint__0_859(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) GetN());
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* EventBlock */

/* EventData */

/* EventDataBlock */

/* Hit */

/* ChanList */

/* DataFileRoot */

/* AsciiRoot */

/* HDFRoot */

/* Tracer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncalibavaCint {
 public:
  G__Sizep2memfuncalibavaCint(): p(&G__Sizep2memfuncalibavaCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncalibavaCint::*p)();
};

size_t G__get_sizep2memfuncalibavaCint()
{
  G__Sizep2memfuncalibavaCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancealibavaCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alibavaCintLN_EventData))) {
     EventData *G__Lderived;
     G__Lderived=(EventData*)0x1000;
     {
       EventBlock *G__Lpbase=(EventBlock*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventData),G__get_linked_tagnum(&G__alibavaCintLN_EventBlock),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock))) {
     EventDataBlock *G__Lderived;
     G__Lderived=(EventDataBlock*)0x1000;
     {
       EventData *G__Lpbase=(EventData*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock),G__get_linked_tagnum(&G__alibavaCintLN_EventData),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EventBlock *G__Lpbase=(EventBlock*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock),G__get_linked_tagnum(&G__alibavaCintLN_EventBlock),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot))) {
     AsciiRoot *G__Lderived;
     G__Lderived=(AsciiRoot*)0x1000;
     {
       DataFileRoot *G__Lpbase=(DataFileRoot*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot),G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot))) {
     HDFRoot *G__Lderived;
     G__Lderived=(HDFRoot*)0x1000;
     {
       DataFileRoot *G__Lpbase=(DataFileRoot*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot),G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablealibavaCint() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__alibavaCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__alibavaCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__alibavaCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__alibavaCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Hit>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEHitcOallocatorlEHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEHitcOallocatorlEHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("HitList",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChanList>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEChanListcOallocatorlEChanListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEChanListcOallocatorlEChanListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("XtraValues",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<double>",117,G__get_linked_tagnum(&G__alibavaCintLN_dequelEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__alibavaCintLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alibavaCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EventBlock */
static void G__setup_memvarEventBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventBlock));
   { EventBlock *p; p=(EventBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->clock)-(long)(p)),104,0,0,-1,-1,-1,1,"clock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),104,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->temp)-(long)(p)),114,0,0,-1,-1,-1,1,"temp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),114,0,0,-1,-1,-1,1,"data[256]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventData */
static void G__setup_memvarEventData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventData));
   { EventData *p; p=(EventData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),100,0,0,-1,-1,-1,1,"value=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventDataBlock */
static void G__setup_memvarEventDataBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock));
   { EventDataBlock *p; p=(EventDataBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->header)-(long)(p)),114,0,0,-1,-1,-1,1,"header[32]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Hit */
static void G__setup_memvarHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_Hit));
   { Hit *p; p=(Hit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_center=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_left=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_right=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_sig=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ChanList */
static void G__setup_memvarChanList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_ChanList));
   { ChanList *p; p=(ChanList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"nch=",0,"number of channels in the list");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"ch=",0,"list of channels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR),G__defined_typename("HitList"),-1,2,"hits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"cm=",0,"Common mode");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"noise=",0,"noise");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DataFileRoot */
static void G__setup_memvarDataFileRoot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot));
   { DataFileRoot *p; p=(DataFileRoot*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLScanType),-1,-2,1,G__FastAllocString(4096).Format("UnknownScan=%lldLL",(long long)DataFileRoot::UnknownScan).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLScanType),-1,-2,1,G__FastAllocString(4096).Format("Charge=%lldLL",(long long)DataFileRoot::Charge).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLScanType),-1,-2,1,G__FastAllocString(4096).Format("Time=%lldLL",(long long)DataFileRoot::Time).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLScanType),-1,-2,1,G__FastAllocString(4096).Format("LaserScan=%lldLL",(long long)DataFileRoot::LaserScan).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("UnknownRun=%lldLL",(long long)DataFileRoot::UnknownRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("Calibration=%lldLL",(long long)DataFileRoot::Calibration).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("LaserSync=%lldLL",(long long)DataFileRoot::LaserSync).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("Laser=%lldLL",(long long)DataFileRoot::Laser).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("RadSource=%lldLL",(long long)DataFileRoot::RadSource).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("Pedestal=%lldLL",(long long)DataFileRoot::Pedestal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("ChargeScan=%lldLL",(long long)DataFileRoot::ChargeScan).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-2,1,G__FastAllocString(4096).Format("LastRType=%lldLL",(long long)DataFileRoot::LastRType).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,2,"max_nchan=256LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLRunType),-1,-1,2,"_type=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,2,"_t0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_nchips=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_chip_mask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_firmware=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__alibavaCintLN_DataFileRootcLcLScanType),-1,-1,2,"_scantype=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_npoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_from=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_to=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_step=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_nevts=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_nchan=",0,"current number of channels");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_seedcut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_neighcut=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,-1,-1,2,"_header[2][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_ped[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_noise[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_signal[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_sn[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_cmmd[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_cnoise[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_gain[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_average_gain=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_mask[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_version=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_polarity=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_t1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_t2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR),G__defined_typename("HitList"),-1,2,"_hits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR),G__defined_typename("vector<ChanList>"),-1,2,"chan_list=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock),-1,-1,2,"_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AsciiRoot */
static void G__setup_memvarAsciiRoot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot));
   { AsciiRoot *p; p=(AsciiRoot*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootcLcLBlockType),-1,-2,1,G__FastAllocString(4096).Format("NewFile=%lldLL",(long long)AsciiRoot::NewFile).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootcLcLBlockType),-1,-2,1,G__FastAllocString(4096).Format("StartOfRun=%lldLL",(long long)AsciiRoot::StartOfRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootcLcLBlockType),-1,-2,1,G__FastAllocString(4096).Format("DataBlock=%lldLL",(long long)AsciiRoot::DataBlock).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootcLcLBlockType),-1,-2,1,G__FastAllocString(4096).Format("CheckPoint=%lldLL",(long long)AsciiRoot::CheckPoint).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootcLcLBlockType),-1,-2,1,G__FastAllocString(4096).Format("EndOfRun=%lldLL",(long long)AsciiRoot::EndOfRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__alibavaCintLN_AsciiRootPriv),-1,-1,4,"priv=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,-1,-1,4,"data_start=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,-1,-1,4,"saved_state=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("XtraValues"),-1,4,"_xtra=",0,"extra values from header");
   }
   G__tag_memvar_reset();
}


   /* HDFRoot */
static void G__setup_memvarHDFRoot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot));
   { HDFRoot *p; p=(HDFRoot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__alibavaCintLN_HDFRootPrivate),-1,-1,4,"priv=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Tracer */
static void G__setup_memvarTracer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alibavaCintLN_Tracer));
   { Tracer *p; p=(Tracer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"average=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"cntr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"val=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alibavaCintLN_dequelEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("deque<double>"),-1,4,"queue=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__alibavaCintLN_TH1),-1,-1,4,"hst=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvaralibavaCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEventBlock(void) {
   /* EventBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventBlock));
   // automatic default constructor
   G__memfunc_setup("EventBlock", 1005, G__alibavaCint_189_0_1, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventBlock), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EventBlock", 1005, G__alibavaCint_189_0_2, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventBlock), -1, 0, 1, 1, 1, 0, "u 'EventBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventBlock", 1131, G__alibavaCint_189_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_189_0_4, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_EventBlock), -1, 1, 1, 1, 1, 0, "u 'EventBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventData(void) {
   /* EventData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventData));
   // automatic default constructor
   G__memfunc_setup("EventData", 892, G__alibavaCint_190_0_1, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EventData", 892, G__alibavaCint_190_0_2, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventData), -1, 0, 1, 1, 1, 0, "u 'EventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventData", 1018, G__alibavaCint_190_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_190_0_4, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_EventData), -1, 1, 1, 1, 1, 0, "u 'EventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventDataBlock(void) {
   /* EventDataBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock));
   // automatic default constructor
   G__memfunc_setup("EventDataBlock", 1383, G__alibavaCint_191_0_1, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EventDataBlock", 1383, G__alibavaCint_191_0_2, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock), -1, 0, 1, 1, 1, 0, "u 'EventDataBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventDataBlock", 1509, G__alibavaCint_191_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_191_0_4, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_EventDataBlock), -1, 1, 1, 1, 1, 0, "u 'EventDataBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHit(void) {
   /* Hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_Hit));
   G__memfunc_setup("cpy",332,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'Hit' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hit",293,G__alibavaCint_192_0_2, 105, G__get_linked_tagnum(&G__alibavaCintLN_Hit), -1, 0, 4, 1, 1, 0, 
"i - - 0 '0' c i - - 0 '0' l "
"i - - 0 '0' r d - - 0 '0' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hit",293,G__alibavaCint_192_0_3, 105, G__get_linked_tagnum(&G__alibavaCintLN_Hit), -1, 0, 1, 1, 1, 0, "u 'Hit' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__alibavaCint_192_0_4, 117, G__get_linked_tagnum(&G__alibavaCintLN_Hit), -1, 1, 1, 1, 1, 0, "u 'Hit' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("center",641,G__alibavaCint_192_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("left",427,G__alibavaCint_192_0_6, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("right",542,G__alibavaCint_192_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("signal",638,G__alibavaCint_192_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("width",544,G__alibavaCint_192_0_9, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hit", 419, G__alibavaCint_192_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncChanList(void) {
   /* ChanList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_ChanList));
   G__memfunc_setup("copy",443,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'ChanList' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChanList",790,G__alibavaCint_197_0_2, 105, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 1, 1, 1, 0, "C - - 10 '0' ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChanList",790,G__alibavaCint_197_0_3, 105, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChanList",790,G__alibavaCint_197_0_4, 105, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 1, 1, 1, 0, "u 'ChanList' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__alibavaCint_197_0_5, 117, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 1, 1, 1, 1, 0, "u 'ChanList' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__alibavaCint_197_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nch",281,G__alibavaCint_197_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chan",378,G__alibavaCint_197_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__alibavaCint_197_0_9, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_hit",717,G__alibavaCint_197_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Hit' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__alibavaCint_197_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nhits",550,G__alibavaCint_197_0_12, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_hits",1054,G__alibavaCint_197_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_hit",740,G__alibavaCint_197_0_14, 117, G__get_linked_tagnum(&G__alibavaCintLN_Hit), -1, 1, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hit_list",864,G__alibavaCint_197_0_15, 117, G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR), G__defined_typename("HitList"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CommonMode",1006,G__alibavaCint_197_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Noise",510,G__alibavaCint_197_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CommonMode",1006,G__alibavaCint_197_0_18, 85, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Noise",510,G__alibavaCint_197_0_19, 85, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseChanList",1297,G__alibavaCint_197_0_20, 105, -1, -1, 0, 2, 3, 1, 0, 
"C - - 10 - - U 'ChanList' - 2 - -", (char*)NULL, (void*) G__func2void( (int (*)(const char*, ChanList**))(&ChanList::ParseChanList) ), 0);
   // automatic destructor
   G__memfunc_setup("~ChanList", 916, G__alibavaCint_197_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDataFileRoot(void) {
   /* DataFileRoot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot));
   G__memfunc_setup("reset_data",1052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_data",837,G__alibavaCint_206_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i r - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenFile",786,G__alibavaCint_206_0_4, 85, G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot), -1, 0, 3, 3, 1, 0, 
"C - - 10 '0' nam C - - 10 '0' pedfile "
"C - - 10 '0' gainfile", (char*)NULL, (void*) G__func2void( (DataFileRoot* (*)(const char*, const char*, const char*))(&DataFileRoot::OpenFile) ), 0);
   G__memfunc_setup("valid",528,G__alibavaCint_206_0_5, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("open",434,G__alibavaCint_206_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("close",534,G__alibavaCint_206_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("rewind",649,G__alibavaCint_206_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("save",431,G__alibavaCint_206_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("restore",772,G__alibavaCint_206_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read_event",1053,G__alibavaCint_206_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read_data",917,G__alibavaCint_206_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("check_point",1159,G__alibavaCint_206_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("new_file",841,G__alibavaCint_206_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start_of_run",1302,G__alibavaCint_206_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("end_of_run",1055,G__alibavaCint_206_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("new_data_block",1453,G__alibavaCint_206_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("version",774,G__alibavaCint_206_0_18, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polarity",884,G__alibavaCint_206_0_19, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polarity",884,G__alibavaCint_206_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_data",837,G__alibavaCint_206_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nchan R - - 10 '0' data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nchan",520,G__alibavaCint_206_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("type",450,G__alibavaCint_206_0_23, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("date",414,G__alibavaCint_206_0_24, 67, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ped",313,G__alibavaCint_206_0_25, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("noise",542,G__alibavaCint_206_0_26, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("signal",638,G__alibavaCint_206_0_27, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sn",225,G__alibavaCint_206_0_28, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_cmmd",832,G__alibavaCint_206_0_29, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_cnoise",1056,G__alibavaCint_206_0_30, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__alibavaCint_206_0_31, 114, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("value",541,G__alibavaCint_206_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clock_counter",1387,G__alibavaCint_206_0_33, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("time",431,G__alibavaCint_206_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("temp",438,G__alibavaCint_206_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("scan_type",966,G__alibavaCint_206_0_36, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npts",453,G__alibavaCint_206_0_37, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("from",436,G__alibavaCint_206_0_38, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("to",227,G__alibavaCint_206_0_39, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("step",444,G__alibavaCint_206_0_40, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nevts",560,G__alibavaCint_206_0_41, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_hit",717,G__alibavaCint_206_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Hit' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__alibavaCint_206_0_43, 117, G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__alibavaCint_206_0_44, 117, G__get_linked_tagnum(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nhits",550,G__alibavaCint_206_0_45, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__alibavaCint_206_0_46, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hit",325,G__alibavaCint_206_0_47, 117, G__get_linked_tagnum(&G__alibavaCintLN_Hit), -1, 1, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_hit_list",1291,G__alibavaCint_206_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Hit,allocator<Hit> >' 'HitList' 11 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__alibavaCint_206_0_49, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_gain",830,G__alibavaCint_206_0_50, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gain",415,G__alibavaCint_206_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seed_cut",844,G__alibavaCint_206_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("neigh_cut",950,G__alibavaCint_206_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_cuts",874,G__alibavaCint_206_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - s d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_timecut",1190,G__alibavaCint_206_0_55, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - t1 d - - 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid_time",1054,G__alibavaCint_206_0_56, 103, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_header",1032,G__alibavaCint_206_0_57, 114, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ichip i - - 0 - ibit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("show_pedestals",1509,G__alibavaCint_206_0_58, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("show_noise",1086,G__alibavaCint_206_0_59, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compute_pedestals",1825,G__alibavaCint_206_0_60, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH2), -1, 0, 2, 1, 1, 0, 
"i - - 0 '-1' mxevts g - - 0 'true' do_cmmd", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compute_pedestals_fast",2350,G__alibavaCint_206_0_61, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '-1' mxevts d - - 0 '0.01' ped_weight "
"d - - 0 '0.001' noise_weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event",1408,G__alibavaCint_206_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' do_cmmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_clusters",1397,G__alibavaCint_206_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '-1' ichip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_clusters",1397,G__alibavaCint_206_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ChanList' - 1 - C", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("save_pedestals",1491,G__alibavaCint_206_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fnam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("load_pedestals",1476,G__alibavaCint_206_0_66, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fnam g - - 0 'false' show", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("load_gain",926,G__alibavaCint_206_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fnam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("load_masking",1257,G__alibavaCint_206_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fnam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spy_data",853,G__alibavaCint_206_0_69, 121, -1, -1, 0, 4, 1, 1, 0, 
"g - - 0 'false' with_signal d - - 0 '0.0' t0 "
"d - - 0 '0.0' t1 i - - 0 '1' nevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("common_mode",1165,G__alibavaCint_206_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("common_mode",1165,G__alibavaCint_206_0_71, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'ChanList' - 1 - C g - - 0 'false' correct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("n_channel_list",1473,G__alibavaCint_206_0_72, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_channel_list",1660,G__alibavaCint_206_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ChanList' - 11 - C", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_channel_lists",1997,G__alibavaCint_206_0_74, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_channel_list",1683,G__alibavaCint_206_0_75, 117, G__get_linked_tagnum(&G__alibavaCintLN_ChanList), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chip_mask",943,G__alibavaCint_206_0_76, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("firmware",861,G__alibavaCint_206_0_77, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nchips",645,G__alibavaCint_206_0_78, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DataFileRoot", 1308, G__alibavaCint_206_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_206_0_80, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_DataFileRoot), -1, 1, 1, 1, 1, 0, "u 'DataFileRoot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAsciiRoot(void) {
   /* AsciiRoot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot));
   G__memfunc_setup("AsciiRoot",909,G__alibavaCint_214_0_1, 105, G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' nam C - - 10 '0' pedfile "
"C - - 10 '0' gainfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid",528,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("save",431,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("restore",772,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read_event",1053,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read_data",917,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("time",431,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("temp",438,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("nxtra",557,G__alibavaCint_214_0_12, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xtra",447,G__alibavaCint_214_0_13, 117, G__get_linked_tagnum(&G__alibavaCintLN_string), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_xtra",839,G__alibavaCint_214_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_xtra",839,G__alibavaCint_214_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AsciiRoot", 909, G__alibavaCint_214_0_16, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot), -1, 0, 1, 1, 1, 0, "u 'AsciiRoot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AsciiRoot", 1035, G__alibavaCint_214_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_214_0_18, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_AsciiRoot), -1, 1, 1, 1, 1, 0, "u 'AsciiRoot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDFRoot(void) {
   /* HDFRoot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot));
   G__memfunc_setup("next_scan_point",1612,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDFRoot",630,G__alibavaCint_221_0_2, 105, G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' nam C - - 10 '0' pedfile "
"C - - 10 '0' gainfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid",528,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("save",431,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("restore",772,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read_event",1053,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read_data",917,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clock_counter",1387,(G__InterfaceMethod) NULL,104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("time",431,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("temp",438,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("HDFRoot", 630, G__alibavaCint_221_0_14, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot), -1, 0, 1, 1, 1, 0, "u 'HDFRoot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDFRoot", 756, G__alibavaCint_221_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_221_0_16, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_HDFRoot), -1, 1, 1, 1, 1, 0, "u 'HDFRoot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTracer(void) {
   /* Tracer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alibavaCintLN_Tracer));
   G__memfunc_setup("Tracer",609,G__alibavaCint_222_0_1, 105, G__get_linked_tagnum(&G__alibavaCintLN_Tracer), -1, 0, 4, 1, 1, 0, 
"C - - 10 - nam C - - 10 - tit "
"i - - 0 - npts i - - 0 '0' average", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__alibavaCint_222_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_hst",750,G__alibavaCint_222_0_3, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__alibavaCint_222_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_point",946,G__alibavaCint_222_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Tracer", 609, G__alibavaCint_222_0_6, (int) ('i'), G__get_linked_tagnum(&G__alibavaCintLN_Tracer), -1, 0, 1, 1, 1, 0, "u 'Tracer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Tracer", 735, G__alibavaCint_222_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alibavaCint_222_0_8, (int) ('u'), G__get_linked_tagnum(&G__alibavaCintLN_Tracer), -1, 1, 1, 1, 1, 0, "u 'Tracer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncalibavaCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalalibavaCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
   G__memfunc_setup("is_text", 768, G__alibavaCint__0_631, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("spy_file", 859, G__alibavaCint__0_632, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'DataFileRoot' - 1 - A i - - 0 '-1' mxevts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("analyze", 756, G__alibavaCint__0_633, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 6, 1, 1, 0, 
"u 'DataFileRoot' - 1 - A C - - 10 - hname "
"d - - 0 '0.' polarity i - - 0 '-1' chip "
"i - - 0 '0' odd i - - 0 '-1' mxevts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("draw_scan", 946, G__alibavaCint__0_634, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 7, 1, 1, 0, 
"u 'DataFileRoot' - 1 - A C - - 10 - hname "
"d - - 0 '1.' factor g - - 0 'false' flip "
"i - - 0 '-1' chip i - - 0 '-1' odd "
"i - - 0 '-1' mxevts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("spectrum", 883, G__alibavaCint__0_635, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 5, 1, 1, 0, 
"u 'DataFileRoot' - 1 - A C - - 10 - hname "
"d - - 0 '0.' polarity i - - 0 '-1' chip "
"i - - 0 '-1' mxevts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("show_spectrum", 1427, G__alibavaCint__0_636, 121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - hname d - - 0 - t0 "
"d - - 0 - t1 i - - 0 - polarity "
"U 'DataFileRoot' - 0 - A g - - 0 'true' dofit", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fit_landau", 1047, G__alibavaCint__0_637, 85, G__get_linked_tagnum(&G__alibavaCintLN_TF1), -1, 0, 1, 1, 1, 0, "U 'TH1' - 0 - hst", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("funcScurve", 1060, G__alibavaCint__0_638, 85, G__get_linked_tagnum(&G__alibavaCintLN_TF1), -1, 0, 1, 1, 1, 0, "C - - 10 '\"fScurve\"' name", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("funcScurveC", 1127, G__alibavaCint__0_639, 85, G__get_linked_tagnum(&G__alibavaCintLN_TF1), -1, 0, 1, 1, 1, 0, "C - - 10 '\"fScurveC\"' name", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("pulse_shape", 1177, G__alibavaCint__0_640, 85, G__get_linked_tagnum(&G__alibavaCintLN_TGraph), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - hst i - - 0 - polarity", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("set_debug", 946, G__alibavaCint__0_641, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - x", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("get_debug", 934, G__alibavaCint__0_642, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("init_landau", 1160, G__alibavaCint__0_643, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("save_text_file", 1490, G__alibavaCint__0_644, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH1' - 0 - h1 C - - 10 - name", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
   G__memfunc_setup("isws", 454, G__alibavaCint__0_843, 103, -1, -1, 0, 2, 1, 1, 0, 
"c - - 0 - c C - - 40 '\" \\t\\n\"' wstr", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("trim_right", 1081, G__alibavaCint__0_844, 117, G__get_linked_tagnum(&G__alibavaCintLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - s", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("trim_left", 966, G__alibavaCint__0_845, 117, G__get_linked_tagnum(&G__alibavaCintLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - s", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("trim_str", 884, G__alibavaCint__0_846, 117, G__get_linked_tagnum(&G__alibavaCintLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - s", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("create_canvas", 1359, G__alibavaCint__0_847, 85, G__get_linked_tagnum(&G__alibavaCintLN_TCanvas), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - - 0 '-1' wx i - - 0 '-1' wy", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("create_h1", 876, G__alibavaCint__0_848, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH1), -1, 0, 5, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"i - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("create_h2", 877, G__alibavaCint__0_849, 85, G__get_linked_tagnum(&G__alibavaCintLN_TH2), -1, 0, 8, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"i - - 0 - - d - - 0 - - "
"d - - 0 - - i - - 0 - - "
"d - - 0 - - d - - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("create_profile", 1476, G__alibavaCint__0_850, 85, G__get_linked_tagnum(&G__alibavaCintLN_TProfile), -1, 0, 7, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"i - - 0 - - d - - 0 - - "
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("create_profile2d", 1626, G__alibavaCint__0_851, 85, G__get_linked_tagnum(&G__alibavaCintLN_TProfile2D), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name C - - 10 - tit "
"i - - 0 - nx d - - 0 - x1 "
"d - - 0 - x2 i - - 0 - ny "
"d - - 0 - y1 d - - 0 - y2", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("get_volt", 868, G__alibavaCint__0_852, 100, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fnam", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("scan_laser", 1051, G__alibavaCint__0_853, 85, G__get_linked_tagnum(&G__alibavaCintLN_TGraphErrors), -1, 0, 6, 1, 1, 0, 
"C - - 10 - detector C - - 10 '0' cal_file "
"C - - 10 '0' ped_file i - - 0 '0' polarity "
"g - - 0 'true' dofit i - - 0 '-1' mxevts", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("graph2csv", 912, G__alibavaCint__0_854, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGraphErrors' - 0 - gr C - - 10 '0' ofilename", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("printCanvas", 1161, G__alibavaCint__0_855, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TCanvas' - 0 - cnvs C - - 10 - out "
"i - - 0 '300' res", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("sin_preguntas", 1410, G__alibavaCint__0_856, 121, -1, -1, 0, 8, 1, 1, 0, 
"U 'DataFileRoot' - 0 - A C - - 10 - data_file "
"C - - 10 '0' cal_file C - - 10 '0' ped_file "
"i - - 0 '0' polarity g - - 0 'true' dofit "
"i - - 0 '5' peaktimesliceinitial i - - 0 '15' peaktimeslicefinal", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("init_crrc", 957, G__alibavaCint__0_857, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("SetN", 378, G__alibavaCint__0_858, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("GetN", 366, G__alibavaCint__0_859, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcalibavaCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__alibavaCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_EventBlock = { "EventBlock" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_EventData = { "EventData" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_EventDataBlock = { "EventDataBlock" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_Hit = { "Hit" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR = { "vector<Hit,allocator<Hit> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgRcLcLiterator = { "vector<Hit,allocator<Hit> >::iterator" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEHitcOallocatorlEHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Hit,allocator<Hit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_ChanList = { "ChanList" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_DataFileRoot = { "DataFileRoot" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_DataFileRootcLcLScanType = { "DataFileRoot::ScanType" , 101 , -1 };
G__linked_taginfo G__alibavaCintLN_DataFileRootcLcLRunType = { "DataFileRoot::RunType" , 101 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR = { "vector<ChanList,allocator<ChanList> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEChanListcOallocatorlEChanListgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ChanList,allocator<ChanList> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_AsciiRootPriv = { "AsciiRootPriv" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_AsciiRoot = { "AsciiRoot" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_AsciiRootcLcLBlockType = { "AsciiRoot::BlockType" , 101 , -1 };
G__linked_taginfo G__alibavaCintLN_HDFRootPrivate = { "HDFRootPrivate" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_HDFRoot = { "HDFRoot" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_Tracer = { "Tracer" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_dequelEdoublecOallocatorlEdoublegRsPgR = { "deque<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TProfile2D = { "TProfile2D" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__alibavaCintLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablealibavaCint() {
  G__alibavaCintLN_string.tagnum = -1 ;
  G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__alibavaCintLN_TF1.tagnum = -1 ;
  G__alibavaCintLN_TH1.tagnum = -1 ;
  G__alibavaCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__alibavaCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__alibavaCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__alibavaCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__alibavaCintLN_TProfile.tagnum = -1 ;
  G__alibavaCintLN_TH2.tagnum = -1 ;
  G__alibavaCintLN_TGraph.tagnum = -1 ;
  G__alibavaCintLN_EventBlock.tagnum = -1 ;
  G__alibavaCintLN_EventData.tagnum = -1 ;
  G__alibavaCintLN_EventDataBlock.tagnum = -1 ;
  G__alibavaCintLN_Hit.tagnum = -1 ;
  G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEHitcOallocatorlEHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_ChanList.tagnum = -1 ;
  G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_DataFileRoot.tagnum = -1 ;
  G__alibavaCintLN_DataFileRootcLcLScanType.tagnum = -1 ;
  G__alibavaCintLN_DataFileRootcLcLRunType.tagnum = -1 ;
  G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEChanListcOallocatorlEChanListgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_AsciiRootPriv.tagnum = -1 ;
  G__alibavaCintLN_AsciiRoot.tagnum = -1 ;
  G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_AsciiRootcLcLBlockType.tagnum = -1 ;
  G__alibavaCintLN_HDFRootPrivate.tagnum = -1 ;
  G__alibavaCintLN_HDFRoot.tagnum = -1 ;
  G__alibavaCintLN_Tracer.tagnum = -1 ;
  G__alibavaCintLN_dequelEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__alibavaCintLN_TProfile2D.tagnum = -1 ;
  G__alibavaCintLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__alibavaCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alibavaCintLN_TCanvas.tagnum = -1 ;
  G__alibavaCintLN_TGraphErrors.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablealibavaCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_string);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TProfile);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_EventBlock),sizeof(EventBlock),-1,262144,(char*)NULL,G__setup_memvarEventBlock,G__setup_memfuncEventBlock);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_EventData),sizeof(EventData),-1,262144,(char*)NULL,G__setup_memvarEventData,G__setup_memfuncEventData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_EventDataBlock),sizeof(EventDataBlock),-1,262144,(char*)NULL,G__setup_memvarEventDataBlock,G__setup_memfuncEventDataBlock);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_Hit),sizeof(Hit),-1,265984,(char*)NULL,G__setup_memvarHit,G__setup_memfuncHit);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEHitcOallocatorlEHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEHitcOallocatorlEHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_ChanList),sizeof(ChanList),-1,298752,(char*)NULL,G__setup_memvarChanList,G__setup_memfuncChanList);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_DataFileRoot),sizeof(DataFileRoot),-1,263430,(char*)NULL,G__setup_memvarDataFileRoot,G__setup_memfuncDataFileRoot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_DataFileRootcLcLScanType),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_DataFileRootcLcLRunType),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEChanListcOallocatorlEChanListgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEChanListcOallocatorlEChanListgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_AsciiRootPriv);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_AsciiRoot),sizeof(AsciiRoot),-1,263424,(char*)NULL,G__setup_memvarAsciiRoot,G__setup_memfuncAsciiRoot);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_AsciiRootcLcLBlockType),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_HDFRootPrivate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_HDFRoot),sizeof(HDFRoot),-1,263424,(char*)NULL,G__setup_memvarHDFRoot,G__setup_memfuncHDFRoot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alibavaCintLN_Tracer),sizeof(Tracer),-1,295936,(char*)NULL,G__setup_memvarTracer,G__setup_memfuncTracer);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_dequelEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TProfile2D);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__alibavaCintLN_TGraphErrors);
}
extern "C" void G__cpp_setupalibavaCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupalibavaCint()");
  G__set_cpp_environmentalibavaCint();
  G__cpp_setup_tagtablealibavaCint();

  G__cpp_setup_inheritancealibavaCint();

  G__cpp_setup_typetablealibavaCint();

  G__cpp_setup_memvaralibavaCint();

  G__cpp_setup_memfuncalibavaCint();
  G__cpp_setup_globalalibavaCint();
  G__cpp_setup_funcalibavaCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncalibavaCint();
  return;
}
class G__cpp_setup_initalibavaCint {
  public:
    G__cpp_setup_initalibavaCint() { G__add_setup_func("alibavaCint",(G__incsetup)(&G__cpp_setupalibavaCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initalibavaCint() { G__remove_setup_func("alibavaCint"); }
};
G__cpp_setup_initalibavaCint G__cpp_setup_initializeralibavaCint;

